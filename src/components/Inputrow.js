import React, { useState } from 'react';
import { TexttoID, readableNumber, removeSpaces } from '../js/Functions';

/**
 * 
 * @param {*} props
 * key          = ID                            // If empty. Key will be generated by props.text
 * text         = DisplayText to user
 * detail       = Comment under DisplayText/text to inform user
 * type         = number / text / select
 * defaultvalue = Gets the default value in the input
 * posttext     = Text after the inputfield. Example: kr / %
 * range        = select range min-max
 * @returns 
 */
function Inputrow(props) {
    const ID                     = (props.key !== '' ? props.key : 'input_' + TexttoID(props.text));
    const DisplayText            = props.text;
    const Type                   = String(props.type).toLowerCase();
    const DetailText             = (props.detail !== '' ? <><br /><span>{props.detail}</span></> : '');
    const DefaultValue           = props.defaultvalue;
    const PostText               = (props.posttext !== '' ? props.posttext : '');
    const SelectRange            = props.range;                     /* min-max */

    const [inputValue, setValue] = useState((Type === 'number' ? readableNumber(DefaultValue) : DefaultValue));

    //console.log(`${Type} => Type === 'number' => ` + Boolean(Type === 'number').toString());


    /**
     * handleChange: Remove last number first
     */
    const handleChange = (e) => {
        switch (Type) {
            case 'number':
                if(isNaN(removeSpaces(e.target.value))){                /* Not a Number - Prevent change */
                    e.preventDefault();

                } 
                else if(e.target.value.length < inputValue.length){     /* Remove last number */
                    setValue(readableNumber(inputValue.slice(0, -1)));

                } 
                else {                                                  /* Allow new number */
                    setValue(readableNumber(e.target.value));
                }
                break;
            case 'select':
                setValue(e.target.value);
                break;
            default:
                setValue(e.target.value);
                break;
        }
    }

    /**
     * handleClick: Move cursor to ending
     */
    const handleClick = (e) => {
        const {value} = e.target;
        const position = value.length;
        e.target.setSelectionRange(position, position);
    }


    /**
     * Render Correct Input Type:
     */
    if(Type === 'number'){
        return (
            <div className="Row">
                <div>{DisplayText}:{DetailText}</div>
                <div><input id={ID} type="text" className="number" value={inputValue} onClick={handleClick} onChange={handleChange} />{PostText}</div>
            </div>
        );

    }
    else if(Type === 'text'){
        return (
            <div className="Row">
                <div>{DisplayText}:{DetailText}</div>
                <div><input id={ID} type="text" className="number" value={inputValue} onClick={handleClick} onChange={handleChange} />{PostText}</div>
            </div>
        );

    }
    else if(Type === 'select'){
        const Range_Min = SelectRange.split('-')[0];
        const Range_Max = SelectRange.split('-')[1];

        var options = [];
        for (var i = Range_Min; i <= Range_Max; i++) {
            options.push(<option key={i} value={i}>{i}{PostText}</option>);
        }

        return (
            <div className="Row">
                <div>{DisplayText}:{DetailText}</div>
                <div>
                    <select id={ID} defaultValue={DefaultValue} type="text" onChange={handleChange}>
                        {options}
                    </select>
                </div>
            </div>
        );
    }
}

export default Inputrow;